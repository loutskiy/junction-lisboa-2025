#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –ø–∞—Ç–µ–Ω—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import requests
import json

API_BASE_URL = 'http://localhost:5001'

def test_patent_recommendation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–∞—Ç–µ–Ω—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç–µ–Ω—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    test_cases = [
        {
            "name": "–í—ã—Å–æ–∫–∏–π –ø–∞—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
            "idea_text": "A novel machine learning algorithm for drug discovery that can identify new therapeutic targets using quantum computing",
            "evidence": [
                {"type": "patent", "meta": {"title": "ML Drug Discovery Patent"}},
                {"type": "paper", "meta": {"title": "AI in Drug Discovery"}},
                {"type": "market", "meta": {"type": "Product launch", "importance_score": 4.0}}
            ]
        },
        {
            "name": "–°—Ä–µ–¥–Ω–∏–π –ø–∞—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", 
            "idea_text": "An innovative software platform for data analysis with modular architecture",
            "evidence": [
                {"type": "paper", "meta": {"title": "Data Analysis Framework"}}
            ]
        },
        {
            "name": "–ù–∏–∑–∫–∏–π –ø–∞—Ç–µ–Ω—Ç–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª",
            "idea_text": "A simple website for online shopping",
            "evidence": []
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"–ò–¥–µ—è: {test_case['idea_text'][:60]}...")
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/patent_recommendation",
                json={
                    "idea_text": test_case["idea_text"],
                    "evidence": test_case["evidence"]
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                patent_rec = result['patent_recommendation']
                
                print(f"‚úÖ ML Recommendation: {patent_rec['ml_model']['recommendation']}")
                print(f"‚úÖ AI Recommendation: {patent_rec['ai_analysis']['recommendation']}")
                print(f"‚úÖ Combined Decision: {patent_rec['combined']['recommendation']}")
                print(f"‚úÖ Confidence: {patent_rec['combined']['confidence']:.2f}")
                print(f"‚úÖ Patent Score: {patent_rec['ml_model']['patent_score']:.1f}/10")
                
                if patent_rec['combined']['all_reasons']:
                    print(f"‚úÖ Reasons: {', '.join(patent_rec['combined']['all_reasons'][:2])}")
            else:
                print(f"‚ùå Error: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå Exception: {e}")

def test_main_evaluate_with_patents():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –ø–∞—Ç–µ–Ω—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –ø–∞—Ç–µ–Ω—Ç–∞–º–∏...")
    
    test_idea = "A revolutionary blockchain-based identity verification system using zero-knowledge proofs"
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/evaluate",
            json={
                "idea_text": test_idea,
                "evidence": [
                    {"type": "patent", "meta": {"title": "Blockchain Identity Patent"}},
                    {"type": "market", "meta": {"type": "Product launch", "importance_score": 3.5}}
                ]
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['analysis_summary']['prediction']}")
            
            if 'patent_analysis' in result:
                patent_analysis = result['patent_analysis']
                print(f"‚úÖ –ü–∞—Ç–µ–Ω—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {patent_analysis['combined']['recommendation']}")
                print(f"‚úÖ –ü–∞—Ç–µ–Ω—Ç–Ω—ã–π —Å–∫–æ—Ä: {patent_analysis['ml_model']['patent_score']:.1f}/10")
                print(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {patent_analysis['combined']['confidence']:.2f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏—á–∏ ML –º–æ–¥–µ–ª–∏
                features = patent_analysis['ml_model']['features']
                print(f"‚úÖ –ü–∞—Ç–µ–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {features['patent_keyword_score']}")
                print(f"‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {features['technical_innovation_score']}")
                print(f"‚úÖ –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –ø–∞—Ç–µ–Ω—Ç—ã={features['patent_evidence_count']}, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è={features['research_evidence_count']}")
            else:
                print("‚ùå –ü–∞—Ç–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"‚ùå Error: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/readiness", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True
        else:
            print(f"‚ùå API –Ω–µ –≥–æ—Ç–æ–≤: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ç–µ–Ω—Ç–Ω–æ–π ML-–º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    if test_api_health():
        test_patent_recommendation()
        test_main_evaluate_with_patents()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
